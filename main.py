import os
import threading
import time

# –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :(
# from docx import Document
# from docx.shared import Pt
# from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

from datetime import datetime, timedelta
from data_base_control import *
import telebot
import sqlite3
import schedule
from telebot.types import InputMediaPhoto

TOKEN = 'token'
GROUP_ID = '-1002033236010'
bot = telebot.TeleBot(TOKEN)

auction_on = {}
user_lots = {}
admins_commands = {
    '1': 'cash ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\nwarn ‚Äî –≤—ã–¥–∞—á–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\ninactive ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç–æ–≤.',
    '2': '–ù–∞ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∏–∂–µ, –∞ —Ç–∞–∫–∂–µ:\n\nreport ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∂–∞–ª–æ–±.\nset_balance ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\nunpost ‚Äî –æ—Ç–º–µ–Ω–∞ –≤—ã–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ—Ç–∞.',
    '3': '–£ –≤–∞—Å —Å—Ç–∞—Ç—É—Å ‚Äî super-admin.\n–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–æ–≤ '
         '–≤—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞–±–æ—Ç—É –≤ –°–∏—Å—Ç–µ–º–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.'}

admins_status = {
    '1': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å! –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º 1 —É—Ä–æ–≤–Ω—è.\n–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ª–æ—Ç–∞–º–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∂–∞–ª–æ–±–∞–º–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏—Ö —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!',
    '2': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å! –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–í–∞—à–∞ —Ä–æ–ª—å - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—à–∞—Ç—å –∏—Ö –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∫–∞–∂–¥–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º!',
    '3': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—è–¥—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n–í–∞—à–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º. –ü–æ–º–æ–≥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ —É—Å–ø–µ—Ö –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!'}

rules_text = ('–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ '
              '—Å—É—Ç–æ–∫‚ÄºÔ∏è\n–¢–∞–∫–∂–µ, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–µ—Ö  –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.\n\n–ß—Ç–æ–±—ã '
              '—É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ª–æ—Ç–∞—Ö.\n–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ '
              '–ø—Ä–æ–¥–∞–≤—Ü—ã, –∏—Ö –æ—Ç–∑—ã–≤—ã —Å—É–º–º–∞—Ä–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—é—Ç 10000+ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ —Ç–æ–≤–∞—Ä—É '
              '–º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞ –ª–æ—Ç–∞.\n\n–°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É –ª–æ—Ç–∞. üòÆ\n–û—Ç–ø—Ä–∞–≤–∫–∞ '
              '–ø–æ—á—Ç–æ–π: —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Ñ–æ—Ç–æ.\n–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ '
              '–æ–ø–ª–∞—Ç—ã.')

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É back –≤ –ø–∞–Ω–µ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
markBackAdm = telebot.types.InlineKeyboardMarkup()
backs_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥‚ùï", callback_data='=')
markBackAdm.add(backs_button)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é(–õ–ö)
markMain = telebot.types.InlineKeyboardMarkup()
main_button = telebot.types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùï", callback_data='main')
markMain.add(main_button)


# help keyboard(–õ–ö)
markHELP = telebot.types.InlineKeyboardMarkup()
my_lots_button = telebot.types.InlineKeyboardButton("–ú–æ–∏ –ª–æ—Ç—ãüé≤", callback_data='lots')
rules_button = telebot.types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞üìù", callback_data='rules')
help_button = telebot.types.InlineKeyboardButton("–ü–æ–º–æ—â—åüìç", callback_data='help')
cash_button = telebot.types.InlineKeyboardButton("–ú–æ–π –∞–∫–∫–∞—É–Ω—Çüíµ", callback_data='personal')


markHELP.row(my_lots_button, cash_button)
markHELP.row(rules_button, help_button)

# admins keyboard
markAdmins = telebot.types.InlineKeyboardMarkup()
commands_button = telebot.types.InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ãüë®üèº‚Äçüíª", callback_data='commands')
status_button = telebot.types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Åüëë", callback_data='status')
system_button = telebot.types.InlineKeyboardButton("–ê–¥–º–∏–Ω.—Å–∏—Å—Ç–µ–º–∞üí¨", callback_data='system')
markAdmins.row(commands_button, status_button)
markAdmins.add(system_button)


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['warn'])
def warning(message):
    if message.chat.type == 'group' or message.chat.type == 'supergroup':
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü—Ä–∏—á–∏–Ω–∞")
        bot.register_next_step_handler(message, process_warning)


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['orders_win'])
def orders_win(message):
    order_winning_names = get_winning_names_lots()

    if order_winning_names:

        markup = telebot.types.InlineKeyboardMarkup()
        for name in order_winning_names:
            button = telebot.types.InlineKeyboardButton(name[0], callback_data=f'/' + name[0])
            markup.add(button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "–ü–æ–±–µ–¥–∏–≤—à–∏–µ –ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['set_balance'])
def set_new_balance(message):
    if message.from_user.id == 626220085:
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É—Å—Ç–∞–≤–Ω–æ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°—É–º–º–∞")
        bot.register_next_step_handler(message, set_balance)


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['inactive'])
def inactive_auctions(message):
    if message.chat.type == 'group' or message.chat.type == 'supergroup':

        result = name_inactive()
        names = [row[0] for row in result]

        keyboard = []
        for button_label in names:
            keyboard.append([telebot.types.InlineKeyboardButton(button_label, callback_data='5' + button_label)])
        markInactive = telebot.types.InlineKeyboardMarkup(keyboard)

        bot.send_message(message.chat.id,
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ—Å—Ç:", reply_markup=markInactive)


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['cash'])
def check_user_cash(message):
    if message.chat.type == 'group' or message.chat.type == 'supergroup':
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞.")
        bot.register_next_step_handler(message, process_check_cash)


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['reports'])
def reports_check(message):
    reports = data_reports()

    if reports:
        markup = telebot.types.InlineKeyboardMarkup()
        for i, report in enumerate(reports):
            user_id, complaint = report
            button = telebot.types.InlineKeyboardButton(f"{user_id}",
                                                        callback_data=f'q{i}')
            markup.add(button)

        bot.send_message(message.chat.id,
                         "–°–ø–∏—Å–æ–∫ *–∂–∞–ª–æ–±* –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ.\n–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–∑ –Ω–∏—Ö.",
                         reply_markup=markup, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "–ñ–∞–ª–æ–±—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['check'])
def check_auctions(message):
    if message.chat.type == 'group' or message.chat.type == 'supergroup':

        results = select_all_auction()

        if results:
            keyboard = []
            lot_names = [row[0] for row in results]
            for button_label in lot_names:
                keyboard.append([telebot.types.InlineKeyboardButton(button_label, callback_data='9' + button_label)])

            markLots = telebot.types.InlineKeyboardMarkup(keyboard)

            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=markLots)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['schedule_post'])
def schedule_post(message):
    if message.chat.type == 'group' or message.chat.type == 'supergroup':

        results = select_all_auction()

        if results:
            keyboard = []
            lot_names = [row[0] for row in results]
            for button_label in lot_names:
                keyboard.append([telebot.types.InlineKeyboardButton(button_label, callback_data='9' + button_label)])

            markLots = telebot.types.InlineKeyboardMarkup(keyboard)

            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=markLots)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")


@bot.message_handler(commands=['unpost'])
def personal_account(message):
    bot.send_message(message.chat.id,
                     "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.\n*–í–Ω–∏–º–∞–Ω–∏–µ!* –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ 5% –æ—Ç –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ—Ç–∞.",
                     parse_mode='Markdown')
    bot.register_next_step_handler(message, process_auction_message, message.from_user.id)


@bot.message_handler(commands=['start'])
def personal_account(message):
    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM personal_account WHERE user_id=?", (message.from_user.id,))
    print(message.from_user.id)
    existing_user = cursor.fetchone()

    if not existing_user:
        cursor.execute(
            "INSERT INTO personal_account (user_id, warn, money, successful_transactions) VALUES (?, ?, ?, ?)",
            (message.from_user.id, 0, 0, 0))
        conn.commit()

    conn.close()

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à *–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*! üëãüèª\n\n–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–æ—Ç–∞–º, –ø–æ–º–æ–≥—É —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞, –∞ —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–º–∏.\n\n–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤!",
                     reply_markup=markHELP, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.chat.id == -1002077468713, commands=['ahelp'])
def admins_info(message):
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*!\n–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
                     parse_mode='Markdown', reply_markup=markAdmins)


@bot.callback_query_handler(func=lambda call: True)
def show_auction_duration(call):
    print(call.data)

    if call.data[0] == '0':

        result = get_count_auction(call.data[1:])

        if result and result[0] > 0:
            pass
        else:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            return

        auction = get_auction_info(call.data[1:])

        if auction:
            user_chat_id = call.from_user.id
            send_auction_to_user(user_chat_id, auction)
            bot.answer_callback_query(call.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.üí¨")

        else:
            pass


    elif call.data == 'system':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥: –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ª–æ—Ç–∞–º–∏, –∂–∞–ª–æ–±–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏. –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π.\n\n–†–∞–±–æ—Ç–∞ —Å –∂–∞–ª–æ–±–∞–º–∏: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤—Ö–æ–¥—è—â–∏–µ –∂–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n–û–±—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤ –°–∏—Å—Ç–µ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.", reply_markup=markBackAdm, parse_mode='Markdown')


    elif call.data == 'status':
        lvl = admins_coomands(call.from_user.id)
        text_lvl = admins_status.get(str(lvl[0]))
        print(text_lvl)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=text_lvl, reply_markup=markBackAdm, parse_mode='Markdown')


    elif call.data == '=':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*!\n–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.',
                              reply_markup=markAdmins, parse_mode='Markdown')


    elif call.data == 'commands':
        lvl = admins_coomands(call.from_user.id)
        text_lvl = admins_commands.get(str(lvl[0]))
        print(text_lvl)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–ù–∞ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n{text_lvl}',
                              reply_markup=markBackAdm, parse_mode='Markdown')


    elif call.data[0] == '1':

        result = get_count_auction(call.data[1:])

        if result and result[0] > 0:
            pass
        else:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            return

        bot.answer_callback_query(call.id, "–£–¥–∞—á–Ω–æ–≥–æ —Ç–æ—Ä–≥–∞.üòé")
        user_chat_id = str(call.message.chat.id)
        if user_chat_id in auction_on.get(call.data, {}):
            current_bet = auction_on[call.data[1:]][user_chat_id]

            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π {current_bet}:")
            bot.register_next_step_handler(call.message, process_bet_step, call.data, current_bet)

        else:
            current_bet = max(auction_on[call.data[1:]].values())
            bot.send_message(call.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ *{current_bet}* BYN\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É :",
                             parse_mode='Markdown')
            bot.register_next_step_handler(call.message, process_bet_step, call.data, call.data[0])


    elif call.data[0] == '3':

        result = get_count_auction(call.data[1:])

        if result and result[0] > 0:
            pass
        else:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            return

        check_status = commission_lot(call.data[1:], call.from_user.id)
        if not check_status:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ—Ç–∞.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!',
                                  reply_markup=markMain, parse_mode='Markdown')
        else:

            auction = get_auction_info(call.data[1:])
            send_auction_to_channel(auction)
            update_auctions_date(1, call.data[1:])

            bot.answer_callback_query(call.id,
                                      "–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω‚úÖ\n\n–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")


    elif call.data[0] == '4':

        bot.answer_callback_query(call.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –±—ã–ª–∏ –≤—ã—Å–ª–∞–Ω—ã.üì∏")
        photo_id = find_photo_by_name(call.data[1:])
        bot.send_photo(call.message.chat.id, photo=photo_id)


    elif call.data[0] == '5':

        auction = get_inactive_auction_info(call.data[1:])
        start_price, end_price, seller_link, location, description, start_time, end_time, name, post = auction
        info = f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {start_price} BYN\n*–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:* {end_price} BYN\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:* {seller_link}\n*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {location}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ë–î."

        markInactivePost = telebot.types.InlineKeyboardMarkup()
        main_button = telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='-' + name)
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='inactive_back')
        post_button = telebot.types.InlineKeyboardButton("–í—ã–ª–æ–∂–∏—Ç—å", callback_data='+' + name)
        markInactivePost.row(main_button, back_button)
        markInactivePost.add(post_button)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=info,
                              reply_markup=markInactivePost, parse_mode='Markdown')


    elif call.data[0] == '6':

        markBet = telebot.types.InlineKeyboardMarkup()
        main_button = telebot.types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùï", callback_data='main')
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='7')

        markBet.row(main_button, back_button)
        delete_user_lots(call.from_user.id, call.data[1:])

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –≤–µ—Ä–Ω—É—à–∏—Å—å –Ω–∞–∑–∞–¥, –ª–∏–±–æ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                              reply_markup=markBet)


    elif call.data[0] == '7':

        lots_user = select_lots_from_user(call.from_user.id)

        keyboard = []
        lots_list = [lot[0] for lot in lots_user]
        for button_label in lots_list:
            keyboard.append([telebot.types.InlineKeyboardButton(button_label, callback_data='6' + button_label)])
        markLots = telebot.types.InlineKeyboardMarkup(keyboard)
        markLots.row(telebot.types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùï", callback_data='main'),
                     telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='lots'))

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=markLots)


    elif call.data[0] == '8':

        result = get_auction_info_unpost(call.data[1:])

        markBet = telebot.types.InlineKeyboardMarkup()
        main_button = telebot.types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùï", callback_data='main')
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='lots')

        markBet.row(main_button, back_button)

        if result and result[0] > 0:

            result = select_lots_lot(call.from_user.id, call.data[1:])

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f"–õ–æ—Ç: *{call.data[1:]}*\n–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: *{result[0][0]}*\n\n–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤!",
                                  reply_markup=markBet, parse_mode='Markdown')
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.\n–î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                                  reply_markup=markBet)

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM lots_lot WHERE user_id = ? AND lots = ?",
                       (call.from_user.id, call.data[1:]))
        result = cursor.fetchall()
        conn.close()
        print(result)


    elif call.data[0] == '9':

        bot.answer_callback_query(call.id, text="–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..")
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ—Ç ‚Äî {call.data[1:]}. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥—Ä—É–∑–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                         parse_mode='Markdown')
        process_confirm_step(call.message, call.data[1:])


    elif call.data == 'personal':

        existing_user = select_info_personal_acc(str(call.from_user.id))

        money, warn, successful_transactions = existing_user
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.üë®üèº‚Äçüíª\n\n*‚Äç–ë–∞–ª–∞–Ω—Å*: {money} BYN.\n*–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è*: {warn}.\n*–£—Å–ø–µ—à–Ω—ã–µ –ª–æ—Ç—ã*: {successful_transactions}.\n\n–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
                              reply_markup=markMain, parse_mode='Markdown')


    elif call.data[0] == 'q':

        index = int(call.data[1:])
        reports = fetch_reports()

        if 0 <= index < len(reports):

            id, user_id, report_text = reports[index]
            markReports = telebot.types.InlineKeyboardMarkup()
            main_button = telebot.types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∂–∞–ª–æ–±–∞–º‚ùï", callback_data='back_reports')
            answear_button = telebot.types.InlineKeyboardButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å‚ö°Ô∏è",
                                                                callback_data=f'a{user_id}:{id}')

            markReports.add(main_button, answear_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,

                                  text=f'–ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{user_id}* :\n\n{report_text}',
                                  reply_markup=markReports, parse_mode='Markdown')


        else:
            bot.answer_callback_query(call.id, text="–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    elif call.data[0] == 'a':

        user_id, id_reports = call.data[1:].split(':')
        result = count_reports(id_reports)

        if result and result[0] > 0:
            pass
        else:
            bot.answer_callback_query(call.id,
                                      "–î–∞–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∂–∞–ª–æ–±.")
            return

        bot.answer_callback_query(call.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∂–∞–ª–æ–±—É.")

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT complaint FROM reports WHERE id=?", (id_reports,))
        report_text = cursor.fetchone()
        conn.close()

        bot.register_next_step_handler(call.message, lambda message: send_answer(message, user_id, report_text[0]))
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∂–∞–ª–æ–±—É:")


    elif call.data == 'back_reports':

        reports = data_reports()

        if reports:
            markUP = telebot.types.InlineKeyboardMarkup()
            for i, report in enumerate(reports):
                print(i)
                user_id, complaint = report
                button = telebot.types.InlineKeyboardButton(f"{user_id}",
                                                            callback_data=f'q{i}')
                markUP.add(button)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–°–ø–∏—Å–æ–∫ *–∂–∞–ª–æ–±* –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ.\n–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–∑ –Ω–∏—Ö.",
                                  reply_markup=markUP, parse_mode='Markdown')

        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ñ–∞–ª–æ–±—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", parse_mode='Markdown')


    elif call.data == 'rules':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=rules_text, reply_markup=markMain)

    elif call.data == 'main':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à *–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*! üëãüèª\n\n–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–æ—Ç–∞–º, –ø–æ–º–æ–≥—É —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞, –∞ —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–º–∏.\n\n–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤!",
                              reply_markup=markHELP, parse_mode='Markdown')

    elif call.data == 'info':
        bot.answer_callback_query(call.id,
                                  '–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –¥–Ω–µ–π, –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.',
                                  show_alert=True)

    elif call.data == 'lots':
        user_id = str(call.from_user.id)
        result, lots_user = lots_count(user_id)

        if result[0][0] > 0:

            keyboard = []
            lots_list = [lot[0] for lot in lots_user]
            for button_label in lots_list:
                keyboard.append([telebot.types.InlineKeyboardButton(button_label, callback_data='8' + button_label)])
            markLots = telebot.types.InlineKeyboardMarkup(keyboard)
            markLots.row(telebot.types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùï",
                                                            callback_data='main'),
                         telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ª–æ—Ç.",
                                                            callback_data='7'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í–∞—à–∏ –ª–æ—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ.", reply_markup=markLots)

        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í–∞—à–∏ –ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç.\n–°–∞–º–æ–µ –≤—Ä–µ–º—è ‚Äî –∏–≥—Ä–∞—Ç—åüëë", reply_markup=markMain)


    elif call.data == 'post':

        markInactivePost = telebot.types.InlineKeyboardMarkup()
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='inactive_back')
        markInactivePost.add(back_button)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.',
                              reply_markup=markInactivePost, parse_mode='Markdown')


    elif call.data == 'inactive_back':
        result = name_inactive()
        names = [row[0] for row in result]

        keyboard = []
        for button_label in names:
            keyboard.append([telebot.types.InlineKeyboardButton(button_label, callback_data='5' + button_label)])
        markInactive = telebot.types.InlineKeyboardMarkup(keyboard)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ—Å—Ç:",
                              reply_markup=markInactive, parse_mode='Markdown')

    elif call.data == 'winners_back':
        order_winning_names = get_winning_names_lots()

        if order_winning_names:
            markup = telebot.types.InlineKeyboardMarkup()
            for name in order_winning_names:
                button = telebot.types.InlineKeyboardButton(name[0], callback_data=f'/' + name[0])
                markup.add(button)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:", reply_markup=markup, )
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f"–ó–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –ø—Ä–∞–≤ *–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*.", parse_mode='Markdown')


    elif call.data == 'help':
        bot.answer_callback_query(call.id, "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ AuctionBot.")
        bot.send_message(call.message.chat.id, "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤–∞ –≤–∞–º –ø–æ–º–æ—â—å.\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
        bot.register_next_step_handler(call.message, process_help_description)


    elif call.data[0] == '+':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.', parse_mode='Markdown')
        bot.register_next_step_handler(call.message, post_inactive_lots, call.data[1:])


    elif call.data[0] == '-':
        delete_inactive_accounts(call.data[1:])

        markInactivePost = telebot.types.InlineKeyboardMarkup()
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='inactive_back')
        markInactivePost.add(back_button)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–ê—É—Ü–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.',
                              reply_markup=markInactivePost, parse_mode='Markdown')


    elif call.data[0] == '?':

        try:
            bot.answer_callback_query(call.id, '–§–æ—Ç–æ –ª–æ—Ç–∞ –±—ã–ª–æ –≤—ã—Å–ª–∞–Ω–æ.‚úÖ')
            photo_id = find_photo_by_name(call.data[1:])
            bot.send_photo(call.message.chat.id, photo=photo_id)
        except:
            bot.answer_callback_query(call.id, '–§–æ—Ç–æ –ª–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏–±–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.üö´')


    elif call.data[0] == '2':

        bot.answer_callback_query(call.id, "–ü—Ä–∞–≤–∞ –Ω–∞ –ª–æ—Ç –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã.‚úÖ")

        markType = telebot.types.InlineKeyboardMarkup()
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥üö´", callback_data='winners_back')
        markType.add(back_button)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É –ø—Ä–∞–≤–∞ –Ω–∞ –ª–æ—Ç.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏—Ö –ª–æ—Ç–æ–≤ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                              reply_markup=markType, parse_mode='Markdown')

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, name_lot, price_win FROM order_winning WHERE name_lot=?", (call.data[2:],))
        user_id, name_lot, price_win = list(cursor.fetchone())
        conn.close()

        # order_win(user_id, name_lot, price_win, call.data[1:2]) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :(


    elif call.data[0] == '/':

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, name_lot, price_win FROM order_winning WHERE name_lot=?", (call.data[1:],))
        user_id, name_lot, price_win = list(cursor.fetchone())

        markType = telebot.types.InlineKeyboardMarkup()
        type_button_1 = telebot.types.InlineKeyboardButton("–Æ–≤–µ–ª–∏—Ä–Ω—ã–πüíç", callback_data='2j' + call.data[1:])
        type_button_2 = telebot.types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —Ü–µ–Ω–Ω—ã–πüóø", callback_data='2h' + call.data[1:])
        type_button_3 = telebot.types.InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–πüìç", callback_data='2b' + call.data[1:])
        back_button = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥üö´", callback_data='winners_back')
        photo_button = telebot.types.InlineKeyboardButton('–§–æ—Ç–æ –ª–æ—Ç–∞üì∏', callback_data='?' + name_lot)

        markType.row(type_button_1, type_button_2)
        markType.add(type_button_3)
        markType.row(back_button, photo_button)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–æ—Ç—É:\n\n–ö–ª–∏–µ–Ω—Ç: *{user_id}*\n–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: *{name_lot}*\n–¶–µ–Ω–∞ –≤—ã–∏–≥—Ä—ã—à–∞: *{price_win}*\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.üßæ\n\n*–í–Ω–∏–º–∞–Ω–∏–µ!* –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é.",
                              reply_markup=markType, parse_mode='Markdown')
        conn.close()



    elif call.data[0] == '*':
        auction_name, winning_bid = call.data.split(':')[1:]
        if check_order_existence(call.from_user.id, auction_name, winning_bid):
            bot.answer_callback_query(call.id, '–≠—Ç–æ—Ç –ª–æ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.üìù')

        else:
            bot.answer_callback_query(call.id, '–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.üë®üèº‚Äçüíª')
            insert_order(call.from_user.id, auction_name, winning_bid)


    else:

        name_lot = call.data
        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT start_time, end_time FROM auctions WHERE name=?", (name_lot,))
        row = cursor.fetchone()
        conn.close()

        if row is not None:

            start_time, end_time = row
            start_time = start_time.split('.')[0]
            end_time = end_time.split('.')[0]
            duration_text = f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}"
            bot.answer_callback_query(call.id, duration_text)

        else:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")


# –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :(
# def order_win(user_id, name_lot, price_win, type_of_lot):
#
#     conn = sqlite3.connect('auction_data.db')
#     cursor = conn.cursor()
#     cursor.execute("DELETE FROM order_winning WHERE user_id=? AND name_lot=?", (user_id, name_lot))
#     conn.commit()
#     conn.close()
#
#     doc = Document()
#
#     lot_types = {'j': '–Æ–≤–µ–ª–∏—Ä–Ω—ã–π', 'h': '–ò—Å—Ç–æ—Ä–µ—á—Å–∫–∏ —Ü–µ–Ω–Ω—ã–π'}
#     lot_type = lot_types.get(type_of_lot, '–°—Ç–∞–Ω–¥–∞—Ä—Ç')
#
#     style = doc.styles['Normal']
#     font = style.font
#     font.name = 'Times New Roman'
#     font.size = Pt(12)
#
#     title = doc.add_heading('–î–æ–∫—É–º–µ–Ω—Ç –æ –ø–µ—Ä–µ–¥–∞—á–µ –ª–æ—Ç–∞', level=1)
#     title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
#
#     doc.add_paragraph(f'–ò–º—è: {user_id}', style='BodyText')
#     doc.add_paragraph(f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name_lot}', style='BodyText')
#     doc.add_paragraph(f'–¶–µ–Ω–∞: {price_win}', style='BodyText')
#     doc.add_paragraph(f'–¢–∏–ø –ª–æ—Ç–∞: {lot_type}', style='BodyText')
#
#     doc.save(f'lot_{name_lot}_document_.docx')


def commission_lot(name, user_id):
    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()

    cursor.execute("SELECT money FROM personal_account WHERE user_id=?", (user_id,))
    money_check = cursor.fetchone()

    cursor.execute("SELECT end_price FROM auctions WHERE name=?", (name,))
    end_price = cursor.fetchone()[0]
    end_price_check = float(end_price) * 0.05

    conn.close()

    if money_check[0] < end_price_check:
        return False
    else:
        new_balance = money_check[0] - end_price_check
        update_personal_account(new_balance, user_id)
        return True


def post_inactive_lots(message, name):
    current_time = datetime.now().strftime('%H:%M')
    end_time_str = message.text

    if current_time < end_time_str < '23:59':

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM inactive_auctions WHERE name=?", (name,))
        rows = get_inactive_auction_info(name)

        data_to_insert = [list(row) for row in rows]

        start_price, end_price, seller_link, location, description, start_time, end_time, name, post = data_to_insert[0]
        cursor.execute("INSERT INTO auctions (start_price, end_price, seller_link, location, description, start_time, "
                       "end_time, name, post) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (start_price, end_price,
                                                                                    seller_link, location,
                                                                                    description, current_time,
                                                                                    end_time_str, name, 0))
        conn.commit()
        conn.close()

        button = telebot.types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.‚úÖ", callback_data="3" + name)
        keyboard = telebot.types.InlineKeyboardMarkup([[button]])
        bot.send_message(message.chat.id,
                         "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n*–í–Ω–∏–º–∞–Ω–∏–µ!*\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –ë–î.",
                         reply_markup=keyboard, parse_mode='Markdown')

        delete_inactive_accounts(name)

    elif end_time_str > '23:59':
        bot.send_message(message.chat.id,
                         "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–¥–Ω–µ–µ 23:59. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
        bot.register_next_step_handler(message, post_inactive_lots, name)

    else:
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.')
        bot.register_next_step_handler(message, post_inactive_lots, name)


def process_help_description(message):
    add_reports(message.from_user.id, message.text)

    bot.send_message(message.chat.id,
                     "–°–ø–∞—Å–∏–±–æ!\n–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ *—É—Å–ø–µ—à–Ω–æ* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n\n–ñ–∞–ª–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É, —Å –≤–∞–º–∏ —Å–≤—è–∂–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.",
                     parse_mode='Markdown')


def process_bet_step(message, lot_name, current_bet):
    print(message)
    try:
        markGp = telebot.types.InlineKeyboardMarkup()
        bet_button_again = telebot.types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data=lot_name)
        markGp.add(bet_button_again)

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT start_price, end_price FROM auctions WHERE name=?", (lot_name[1:],))
        start_price_tuple, end_price = cursor.fetchone()
        conn.close()

        bet = float(message.text)
        start_price = start_price_tuple if start_price_tuple else 0.0
        current_bet = max(value for value in auction_on[lot_name[1:]].values())

        if bet > end_price:
            bot.send_message(message.chat.id,
                             f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é —Ü–µ–Ω—É *{end_price}*.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.",
                             parse_mode='Markdown')
            bot.register_next_step_handler(message, process_bet_step, lot_name, current_bet)

        elif bet > float(current_bet):
            users_to = [user_id for user_id, user_bet in auction_on[lot_name[1:]].items() if float(user_bet) < bet]

            for user_chat_id in users_to:
                if user_chat_id != str(message.chat.id):
                    try:
                        bot.send_message(user_chat_id,
                                         f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç '{lot_name[1:]}' –±—ã–ª–∞ –ø–µ—Ä–µ–±–∏—Ç–∞.\n–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{bet}*",
                                         reply_markup=markGp, parse_mode='Markdown')
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞: {e}")
                        continue

            markup = telebot.types.InlineKeyboardMarkup()
            make_bet_button = telebot.types.InlineKeyboardButton("–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data=lot_name)
            markup.add(make_bet_button)

            conn = sqlite3.connect('auction_data.db')
            cursor = conn.cursor()

            cursor.execute("SELECT COUNT(*) FROM lots_lot WHERE user_id = ? AND lots = ?",
                           (str(message.chat.id), lot_name[1:]))
            row_count = cursor.fetchone()[0]

            if row_count > 0:

                cursor.execute("UPDATE lots_lot SET end_price = ? WHERE user_id = ? AND lots = ?",
                               (bet, str(message.chat.id), lot_name[1:]))
            else:

                cursor.execute("INSERT INTO lots_lot (user_id, lots, end_price) VALUES (?, ?, ?)",
                               (str(message.chat.id), lot_name[1:], bet))

            conn.commit()

            auction_on[lot_name[1:]][str(message.chat.id)] = bet

            cursor.execute("INSERT INTO bids_history (lot_name, bidder_id, bid_amount) VALUES (?, ?, ?)",
                           (lot_name[1:], message.from_user.id, bet))
            conn.commit()
            conn.close()

            bot.send_message(message.chat.id, f"–°—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ *{bet}* –ø—Ä–∏–Ω—è—Ç–∞.", parse_mode='Markdown',
                             reply_markup=markup)

        else:
            bot.send_message(message.chat.id,
                             f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π *{current_bet}*.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.",
                             parse_mode='Markdown')
            bot.register_next_step_handler(message, process_bet_step, lot_name, current_bet)

    except:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        bot.register_next_step_handler(message, process_bet_step, lot_name, current_bet)


def process_check_cash(message):
    user_id = message.forward_from.id if message.forward_from and message.forward_from.id else message.text
    existing_user = select_info_personal_acc(user_id)
    if existing_user:
        money, warn, successful_transactions = existing_user
        text = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüë®üèº‚Äçüíª:\n\n*‚Äç–ë–∞–ª–∞–Ω—Å*: {money} BYN.\n*–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è*: {warn}.\n*–£—Å–ø–µ—à–Ω—ã–µ –ª–æ—Ç—ã*: {successful_transactions}.'
    else:
        text = 'ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞.'
        bot.register_next_step_handler(message, process_check_cash)
    bot.send_message(chat_id=message.chat.id, text=text, parse_mode='Markdown')


def process_warning(message):
    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()

    user_id = None
    parts = message.text.split(maxsplit=1)

    if message.forward_from and message.forward_from.id:

        user_id = message.forward_from.id
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å *–ø—Ä–∏—á–∏–Ω–æ–π* –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.",
                         parse_mode='Markdown')
        bot.register_next_step_handler(message, lambda msg: process_reason(msg, user_id))

    else:
        try:
            user_id_or_info = parts[0]
            if user_id_or_info.isdigit():
                user_id = int(user_id_or_info)
            else:
                bot.send_message(message.chat.id,
                                 "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                conn.close()
                bot.register_next_step_handler(message, process_warning)
                return
            reason = parts[1]

            cursor.execute("SELECT warn FROM personal_account WHERE user_id=?", (user_id,))
            warning_count = cursor.fetchone()

            if warning_count is not None:
                warning_count = warning_count[0]
            else:
                bot.send_message(message.chat.id,
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.")
                bot.register_next_step_handler(message, process_warning)
                conn.close()
                return

            cursor.execute("UPDATE personal_account SET warn = ? WHERE user_id = ?",
                           (float(warning_count) + 1, user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            bot.send_message(user_id, f"–í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n–ü—Ä–∏—á–∏–Ω–∞: *{reason}*", parse_mode='Markdown')
            add_warning(user_id, reason, message.from_user.id)

        except:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n–î–∞–ª–µ–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_warning)

    conn.close()


def set_balance(message):
    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()

    user_id = None
    parts = message.text.split(maxsplit=1)

    if message.forward_from and message.forward_from.id:
        user_id = message.forward_from.id
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.",
                         parse_mode='Markdown')
        bot.register_next_step_handler(message, lambda msg: process_balance(msg, user_id))

    else:
        try:
            user_id_or_info = parts[0]
            if user_id_or_info.isdigit():
                user_id = int(user_id_or_info)
            else:
                bot.send_message(message.chat.id,
                                 "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                conn.close()
                bot.register_next_step_handler(message, process_warning)
                return
            balance = parts[1]

            cursor.execute("UPDATE personal_account SET money = ? WHERE user_id = ?",
                           (float(balance), user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            bot.send_message(user_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {balance}.")

        except:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n–î–∞–ª–µ–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_warning)

    conn.close()


def process_balance(message, user_id):
    try:
        new_balance = float(message.text)
        update_personal_account(new_balance, user_id)

        bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        bot.send_message(user_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance}.")

    except:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, lambda msg: process_balance(msg, user_id))


def process_reason(message, user_id):
    reason = message.text.strip()
    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()

    cursor.execute("SELECT warn FROM personal_account WHERE user_id=?", (user_id,))
    warning_count = cursor.fetchone()
    try:
        if warning_count is not None:
            warning_count = warning_count[0]
        else:
            bot.send_message(message.chat.id,
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_warning)

        cursor.execute("UPDATE personal_account SET warn = ? WHERE user_id = ?", (warning_count + 1, user_id))
        conn.commit()

        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        add_warning(user_id, reason, message.from_user.id)
        bot.send_message(user_id, f"–í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n–ü—Ä–∏—á–∏–Ω–∞: *{reason}*", parse_mode='Markdown')
        if warning_count + 1 >= 3:
            bot.send_message(message.chat.id,
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")

        conn.close()
    except:
        pass
    conn.close()


def schedule_post_time(message):
    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT name, start_price, end_price, seller_link, location, description, start_time, end_time FROM auctions WHERE name=?",
        (message.text,))
    results = cursor.fetchall()
    conn.close()

    if results:
        current_time = datetime.now().time().strftime('%H:%M')
        max_time = '23:59'

        bot.send_message(message.chat.id,
                         f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–µ —Ä–∞–Ω–µ–µ {current_time} –∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ {max_time}:")
        bot.register_next_step_handler(message, process_time, results)
    else:
        bot.send_message(message.chat.id, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        bot.register_next_step_handler(message, schedule_post_time)


def process_time(message, results):
    print(results)
    time_str = message.text

    current_time = datetime.now().strftime('%H:%M')
    if time_str <= current_time:
        bot.send_message(message.chat.id,
                         f"–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({current_time}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
        bot.register_next_step_handler(message, process_time, results)
    elif time_str > '23:59':
        bot.send_message(message.chat.id, "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–¥–Ω–µ–µ 23:59. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
        bot.register_next_step_handler(message, process_time, results)
    else:
        auction_info = results[0]
        schedule.every().day.at(time_str).do(schedule_post_group, auction_info)
        bot.send_message(message.chat.id, f"–õ–æ—Ç {results[0]} –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ *{time_str}*.", parse_mode='Markdown')


def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)


def schedule_post_group(auction):
    name, start_price, end_price, seller_link, location, description, start_time, end_time = auction
    info = f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {start_price} BYN\n*–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:* {end_price} BYN\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:* {seller_link}\n*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {location}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"

    markup = telebot.types.InlineKeyboardMarkup()
    duration_button = telebot.types.InlineKeyboardButton("üïî", callback_data=name)

    auction_button = telebot.types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—Éüìà", callback_data='0' + name)

    buy_button = telebot.types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Å—Ä–∞–∑—É‚ùóÔ∏è", callback_data=start_price,
                                                    url='https://t.me/qwertyuqieiowiebot')
    markup.add(duration_button)
    markup.row(auction_button, buy_button)

    photo_id = find_photo_by_name(name)
    auction_on[name] = {f'admin': start_price}
    auction_stop_processing(name, end_time)

    bot.send_photo(GROUP_ID, photo=photo_id, caption=info, reply_markup=markup, parse_mode='Markdown')


def send_auction_info(chat_id, auction):
    start_price, end_price, seller_link, location, description, start_time, end_time, name, post = auction
    info = f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {start_price} BYN\n*–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:* {end_price} BYN\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:* {seller_link}\n*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {location}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ *{float(end_price) * 0.05}* –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞."

    photo_path = 'C:/Users/–ñ–µ–Ω—è/Desktop/TGBOT/'
    photo_files = [file for file in os.listdir(photo_path) if file.startswith(name)]

    markUp = telebot.types.InlineKeyboardMarkup()

    confirm_button = telebot.types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ", callback_data='3' + name)
    markUp.add(confirm_button)

    if len(photo_files) == 1:
        with open(os.path.join(photo_path, photo_files[0]), 'rb') as photo:
            photo_data = photo.read()
            sent_message = bot.send_photo(chat_id=chat_id, photo=photo_data, caption=info, parse_mode='Markdown',
                                          reply_markup=markUp)

    else:
        media = []
        for idx, photo_file in enumerate(photo_files):
            with open(os.path.join(photo_path, photo_file), 'rb') as photo:
                photo_data = photo.read()
                caption = info if idx == 0 else ''
                media.append(InputMediaPhoto(media=photo_data, caption=caption, parse_mode='Markdown'))

        if media:
            bot.send_media_group(chat_id=chat_id, media=media)
        else:
            bot.send_message(chat_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


def process_confirm_step(message, chosen_lot):
    auction = get_auction_info(chosen_lot)

    if auction:
        send_auction_info(message.chat.id, auction)
    else:
        bot.send_message(message.chat.id, "–ê—É–∫—Ü–∏–æ–Ω —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def find_photo_by_name(name):
    photo_path = 'C:/Users/–ñ–µ–Ω—è/Desktop/TGBOT/'
    for filename in os.listdir(photo_path):
        if filename.startswith(name):
            full_path = os.path.join(photo_path, filename)
            with open(full_path, 'rb') as photo_file:
                return photo_file.read()
    return None


def send_auction_to_channel(auction):
    start_price, end_price, seller_link, location, description, start_time, end_time, name, post = auction
    info = f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {start_price} BYN\n*–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:* {end_price} BYN\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:* {seller_link}\n*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {location}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"

    markup = telebot.types.InlineKeyboardMarkup()
    duration_button = telebot.types.InlineKeyboardButton("üïî", callback_data=name)
    auction_button = telebot.types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—Éüìà", callback_data='0' + name)
    buy_button = telebot.types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Å—Ä–∞–∑—É‚ùóÔ∏è", callback_data=start_price,
                                                    url='https://t.me/qwertyuqieiowiebot')
    markup.add(duration_button)
    markup.row(auction_button, buy_button)

    photo_id = find_photo_by_name(name)
    auction_on[name] = {f'admin': start_price}
    auction_stop_processing(name, end_time)

    bot.send_photo(GROUP_ID, photo=photo_id, caption=info, reply_markup=markup, parse_mode='Markdown')


def auction_stop_processing(name, end_time):
    print(end_time)
    try:
        end_time = end_time.split()[1]
    except:
        pass

    schedule.every().day.at(end_time).do(auction_stop, name)

    schedule_thread = threading.Thread(target=run_auction_stop)
    schedule_thread.start()


def auction_stop(auction_name):
    print(auction_name)
    max_bidder_id = None
    max_bid = 0

    bids = auction_on.get(auction_name, {})

    for bidder_id, bid in bids.items():
        bid_value = float(bid)
        if bid_value > max_bid:
            max_bid = bid_value
            max_bidder_id = bidder_id

    result = get_auction_info_unpost(auction_name)
    print(result)
    if not result:
        if not max_bidder_id:
            bot.send_message(-1002077468713,
                             f'–ê—É—Ü–∏–æ–Ω–Ω—ã–π –ª–æ—Ç *{auction_name}* –±—ã–ª —É–¥–∞–ª–µ–Ω –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å—Ç–∞–≤–æ–∫ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤.\n–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ—Ç, –ª–∏–±–æ —Å–¥–µ–ª–∞–π –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.',
                             parse_mode='Markdown')
        else:
            bot.send_message(max_bidder_id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞—É–∫—Ü–∏–æ–Ω {auction_name} –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–±–æ —É–¥–∞–ª–µ–Ω.',
                             parse_mode='Markdown')
        return

    move_to_inactive_auctions(auction_name)

    try:
        if max_bidder_id:
            send_winning_message(max_bidder_id, auction_name, max_bid)

    except:
        bot.send_message(-1002077468713,
                         f'–ê—É—Ü–∏–æ–Ω–Ω—ã–π –ª–æ—Ç *{auction_name}* –±—ã–ª —É–¥–∞–ª–µ–Ω –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å—Ç–∞–≤–æ–∫ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤.\n–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ—Ç, –ª–∏–±–æ —Å–¥–µ–ª–∞–π –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.',
                         parse_mode='Markdown')
        delete_auction_db(auction_name)


def send_winning_message(user_id, auction_name, winning_bid=None):
    markOrder = telebot.types.InlineKeyboardMarkup()
    order_button = telebot.types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É.",
                                                      callback_data=f'*:{auction_name}:{winning_bid}')
    markOrder.add(order_button)

    message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ *{auction_name}* —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º *{winning_bid}* BYN."
    bot.send_message(user_id, message, reply_markup=markOrder, parse_mode='Markdown')
    delete_auction_db(auction_name)


def run_auction_stop():
    while True:
        schedule.run_pending()
        time.sleep(1)


def send_answer(message, user_id, report_text):
    bot.send_message(user_id, f"–í–∞—à–∞ –∂–∞–ª–æ–±–∞ *{report_text}* –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:\n\n{message.text}", parse_mode='Markdown')
    delete_from_reports(report_text)
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –Ω–∞ –∂–∞–ª–æ–±—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∂–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


def send_auction_to_user(chat_id, auction):
    start_price, end_price, seller_link, location, description, start_time, end_time, name, post = auction
    info = f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {start_price} BYN\n*–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞:* {end_price} BYN\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:* {seller_link}\n*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {location}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"

    markUp = telebot.types.InlineKeyboardMarkup()

    bet_button = telebot.types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data='1' + name)
    media_button = telebot.types.InlineKeyboardButton("–§–æ—Ç–æ/–≤–∏–¥–µ–æ", callback_data='4' + name)
    info_button = telebot.types.InlineKeyboardButton("‚ùì", callback_data='info')
    time_button = telebot.types.InlineKeyboardButton("üïî", callback_data=name)
    markUp.add(time_button, info_button)
    markUp.add(bet_button, media_button)

    photo_id = find_photo_by_name(name)
    bot.send_photo(chat_id, photo=photo_id, caption=info, reply_markup=markUp, parse_mode='Markdown')


def delete_auction(auction_name, end_price, user_id, message):
    commiss = end_price * 0.05

    conn = sqlite3.connect('auction_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT money FROM personal_account WHERE user_id=?", (user_id,))
    user_balance = cursor.fetchone()[0]
    if user_balance < commiss:
        bot.send_message(message.chat.id, '–í–∞—à –±–∞–ª–∞–Ω—Å –º–∞–ª –¥–ª—è —É–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å–∏–∏.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.')
        return

    new_balance = user_balance - commiss

    move_to_inactive_auctions(auction_name)
    cursor.execute("UPDATE personal_account SET money=? WHERE user_id=?", (new_balance, user_id))
    cursor.execute("DELETE FROM auctions WHERE name=?", (auction_name,))
    conn.commit()
    conn.close()

    bot.delete_message(chat_id='-1002033236010', message_id=message.forward_from_message_id)
    bot.send_message('-1002077468713', f"–ê—É–∫—Ü–∏–æ–Ω *{auction_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏.",
                     parse_mode='Markdown')


def process_auction_message(message, user_id):
    auction_message = message.caption
    auction_lines = auction_message.strip().split('\n')

    lines = ['–ù–∞–∑–≤–∞–Ω–∏–µ:', '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:']
    missing_lines = [line for line in lines if line not in auction_lines]
    if not missing_lines:
        bot.reply_to(message, f"123–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞.")
        return

    auction_name = None
    end_price = None
    for line in auction_lines:
        if '–ù–∞–∑–≤–∞–Ω–∏–µ:' in line:
            auction_name = line.split(': ')[1].strip()
        elif '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞' in line:
            end_price = float(line.split(': ')[1].split()[0])

    if auction_name and end_price:

        conn = sqlite3.connect('auction_data.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM auctions WHERE name=?', (auction_name,))
        result = cursor.fetchall()
        conn.close()
        if not result:
            bot.send_message('-1002077468713',
                             "–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ *–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω*.\n–û–ø–µ—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             parse_mode='Markdown')
            return

        delete_auction(auction_name, end_price, user_id, message)
    else:
        bot.send_message('-1002077468713', "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞.")


run_schedule_thread = threading.Thread(target=run_schedule)
run_schedule_thread.start()

print('start')
bot.polling()
